Comandos Utilizados en la primera clase

1-)Inicializar un reporcitorio: git init
2-)Agregar archivo al stage: git add historia.txt
3-)Remover archivo del stage: git rm --cached historia.txt
4-)Agregar archivo al stage: git add historia.txt
5-)ver variables de configuracion de git: git config --list
6-)ver ubicación de archivo de configuracion de git: git config --list --show-origin
7-)configurar nombre en variables de configuracion de git: git config --global user.name ="Ricardo Diez"
8-)configurar email en variables de configuracion de git: git config --global user.email ="ricardo.diez@troquer.com.mx"
9-)git commit -m "Este es el primer commit del archivo"
10-)para agregar todos los archivos al stage: git add .  o  git add -A
11-)para ver los cambios de un archivo: git log historia.txt
12-)comando para ver cambios de un archivo detallado: git log --follow -p -- historia.txt

Comando utlizados en la clase de Volver en el tiempo
13-)comando para volver en el tiempo (un commit en esepecifico): git reset ID_COMMIT --hard(--soft)
14-)ver cambios con detalles: git log --stat
15-)ir a una versión especifica de un solo archivo: git checkout cea3d0a0c42f918f2b7fcdb9cdd61c81f5600aee(ID_COMMIT) historia.txt
16-)regresar a la versión mas actualizada de ese unico archivo: git checkout master historia.txt
17-)sacar un archivo del area de staging: git reset HEAD historia.txt

Comando utilizados en la clase de branch
18-)para crear una rama: git branch <nombre_rama>
19-)para cambiar de rama: git checkout <nombre_rama>
20-)el apuntador HEAD indica los ultimos cambios de la rama donde estas ubicado

Comandos utilizados en la clase de Merge
21-)Nos movemos a la rama que queremos que reciba los cambios: git checkout master
22-)Hacemos merge en este caso de master con cabecera: git merge cabecera

Clase 21 explica como generar tu llave publica y privada.

Comandos utilizados en la clase para conectar mi llave publica con GitHub
23-)Para checar las conexiones remotas del repositorio: git remote -v
24-)Para cambiar la conexion https por la conexion ssh: git remote set-url origin git@github.com:rldiezn/hyperblog.git

Comandos utilizados en la clase para etiquetas de git 
25-)Para ver todos los cambios de todas las ramas: git log --all
26-)Para ver todos los cambios de todas las ramas en forma de arbol: git log --all --graph
27-)Para ver todos los cambios de todas las ramas en forma de arbol comprimido: git log --all --graph --decorate --oneline 
EXTRA: para ver un log completo y mas detallado de todas las ramas: git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
EXTRA 2: para agregar alias en git : git config --global alias.superlog "log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all", y se accede a el haciendo este comando -> git superlog 
28-)Para crear tag a un commit en especifico: git tag -a v0.1 -m "Resultado de las primeras clases del curso" 644abda
29-)Mostrar tags disponibles: git tag
30-)Mostrar tags disponibles y su commit asociado:  git show-ref --tags
31-)Para hacer push de los tags a git hub: git push origin --tags
32-)Para borrar un tag: git tag -d (nombreDelTag)
33-)Para borrar un tag en remoto:git push origin :refs/tags/nombreDelTag

Comandos para la clase de fork con github
34-)Para poder hacer pull del repositorio donde hiciste fork, es necesario agregar el origen remoto con una palabra distinta a la de origin, el estandar recomendado es usar upstream: git remote add upstream git@github.com:platzy/hyperblog.git

Clase para generar Readme mas bonito
35-)pagina para hacer un readme mas bonito https://pandao.github.io/editor.md/en.html

Clase de github pages
36-)dominio gratis por parte de gitHub:  https://pages.github.com/

Clase para rebase
37-)Cambiamos a la rama que queremos traer los cambios: git checkout experiment
38-)Aplicamos rebase para traer los cambios de la rama que queremos: git rebase master
NOTA: git rebase reescribe la historia del repositorio, cambia la historia de donde comenzó la rama y solo debe ser usado de manera local.

Clase de git stash
39-)git stash : Guarda el trabajo actual de manera temporal. (Archivos modificados o eliminados)
40-)git stash -u : Crea un stash con todos los archivos. (Añadiendo los creados Untracked)
41-)git stash save “mensaje” : Crea un stash con el mensaje especificado.
42-)git stash list : Permite visualizar todos los stash existentes.
43-)git stash clear : Elimina todos los stash existentes.
44-)git stash drop : Elimina el stash más reciente. El que tiene num_stash=0.
45-)git stash drop stash@{num_stash} : Elimina un stash específico.
46-)git stash apply : Aplica el stash más reciente. El que tiene num_stash=0.
47-)git stash apply stash@{num_stash} : Aplica los cambios de un stash específico.
48-)git stash pop : Aplica el stash más reciente y lo elimina. El que tiene num_stash=0.
49-)git stash pop stash@{num_stash} : Aplica los cambios de un stash específico y elimina lo stash.
50-)git stash branch nombre_de_rama : Crea una rama y aplica el stash mas reciente.
51-)git stash branch nombre_de_rama stash@{num_stash} : Crea una rama y aplica el stash especificado.

Consideraciones:

El cambio más reciente (al crear un stash) SIEMPRE recibe el valor 0 y los que estaban antes aumentan su valor.
Al crear un stash tomará los archivos que han sido modificados y eliminados. Para que tome un archivo creado es necesario agregarlo al Staging Area con git add [nombre_archivo] con la intención de que git tenga un seguimiento de ese archivo, o también utilizando el comando git stash -u.
Al aplicar un stash este no se elimina, es buena práctica eliminarlo.
