Comandos Utilizados en la primera clase

1-)Inicializar un reporcitorio: git init
2-)Agregar archivo al stage: git add historia.txt
3-)Remover archivo del stage: git rm --cached historia.txt
4-)Agregar archivo al stage: git add historia.txt
5-)ver variables de configuracion de git: git config --list
6-)ver ubicación de archivo de configuracion de git: git config --list --show-origin
7-)configurar nombre en variables de configuracion de git: git config --global user.name ="Ricardo Diez"
8-)configurar email en variables de configuracion de git: git config --global user.email ="ricardo.diez@troquer.com.mx"
9-)git commit -m "Este es el primer commit del archivo"
10-)para agregar todos los archivos al stage: git add .  o  git add -A
11-)para ver los cambios de un archivo: git log historia.txt
12-)comando para ver cambios de un archivo detallado: git log --follow -p -- historia.txt

Comando utlizados en la clase de Volver en el tiempo
13-)comando para volver en el tiempo (un commit en esepecifico): git reset ID_COMMIT --hard(--soft)
14-)ver cambios con detalles: git log --stat
15-)ir a una versión especifica de un solo archivo: git checkout cea3d0a0c42f918f2b7fcdb9cdd61c81f5600aee(ID_COMMIT) historia.txt
16-)regresar a la versión mas actualizada de ese unico archivo: git checkout master historia.txt
17-)sacar un archivo del area de staging: git reset HEAD historia.txt

Comando utilizados en la clase de branch
18-)para crear una rama: git branch <nombre_rama>
19-)para cambiar de rama: git checkout <nombre_rama>
20-)el apuntador HEAD indica los ultimos cambios de la rama donde estas ubicado

Comandos utilizados en la clase de Merge
21-)Nos movemos a la rama que queremos que reciba los cambios: git checkout master
22-)Hacemos merge en este caso de master con cabecera: git merge cabecera

